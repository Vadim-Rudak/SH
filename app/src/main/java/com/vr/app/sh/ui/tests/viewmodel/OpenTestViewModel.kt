package com.vr.app.sh.ui.tests.viewmodel

import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import com.vr.app.sh.domain.UseCase.GetListQuestionsBD
import com.vr.app.sh.domain.model.Question
import com.vr.app.sh.domain.model.ResultTest
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.Job
import kotlinx.coroutines.flow.collectIndexed
import kotlinx.coroutines.launch

class OpenTestViewModel(private val getListQuestionsBD: GetListQuestionsBD): ViewModel() {

    var listQuestions = MutableLiveData<List<Question>>()
    lateinit var arrayAnswers:Array<Int>
    var resultTest = ResultTest()
    var job: Job? = null

    init {
        fetchListQuestions()
    }

    private fun fetchListQuestions () {
        job = CoroutineScope(Dispatchers.IO).launch {
            getListQuestionsBD.execute().collectIndexed { index, value ->
                listQuestions.postValue(value)
            }
        }
    }

    fun setInfoQuestions(list:List<Question>){
        arrayAnswers = Array(list.size){3}
        resultTest.test_id = list[0].test_id
    }

    fun getTestResult(): ResultTest {
        for (i in arrayAnswers.size-1 downTo 0){
            when(arrayAnswers[i]){
                1->resultTest.num_correct_answer++
                2->resultTest.num_wrong_answer++
                3->resultTest.num_not_answer++
            }
        }
        resultTest.all_result = resultTest.num_correct_answer*100/arrayAnswers.size
        return resultTest
    }

    override fun onCleared() {
        super.onCleared()
        job?.cancel()
    }
}